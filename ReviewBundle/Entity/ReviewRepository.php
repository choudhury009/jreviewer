<?php

namespace Reviewer\ReviewBundle\Entity;

/**
 * ReviewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReviewRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * returns all reviews for a specific book
     */
    public function getAllReviews($bookId)
    {
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review')
            ->where("review.book = :bookId")
            ->setParameter('bookId',$bookId);

        $query = $queryBuilder->getQuery();
        $result = $query->getResult();

        return $result;
    }

    /**
     * query to find number of votes for a review
     */
    public function getVotes($id)
    {
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review.id','review.votes')
        ->where("review.id = :id")
        ->setParameter('id', $id);

        $query = $queryBuilder->getQuery();
        $result = $query->getSingleResult();

        return $result;
    }

    /**
     * query to get usernames of those who voted up or down
     */
    public function getVoters($id, $username, $voteType)
    {
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review.id','review.upVoters', 'review.downVoters')
            ->where("review.id = :id")
            ->setParameter('id', $id);

        $query = $queryBuilder->getQuery();
        $queryResult = $query->getSingleResult();
        $upVoters = $queryResult['upVoters'];
        $downVoters = $queryResult['downVoters'];
        if ($voteType === 'up') {
            if (strpos($upVoters,$username) !== false) {
                return false;
            } else {
                if (strpos($downVoters,$username) !== false) {
                    $downReplace = str_replace($username,'',$downVoters);
                    $downVoters = $downReplace;
                } else {
                    $upVoters = is_null($upVoters) ? $username : $upVoters . ',' . $username;
                }
            }
        } elseif ($voteType === 'down') {
            if (strpos($downVoters,$username) !== false) {
                return false;
            } else {
                if (strpos($upVoters,$username) !== false) {
                    $upReplace = str_replace($username,'',$upVoters);
                    $upVoters = $upReplace;
                } else {
                    $downVoters = is_null($downVoters) ? $username : $downVoters . ',' . $username;
                }
            }
        }

        return ['upVoters' => $upVoters, 'downVoters' => $downVoters];
    }

    /**
     * query to check if a user has reviewed a book
     */
    public function checkUserReview($id, $user)
    {
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review.id')
            ->where("review.book = :id")
            ->andWhere('review.author = :user')
            ->setParameter('id', $id)
            ->setParameter('user', $user);

        $query = $queryBuilder->getQuery();
        $queryResult = $query->getResult();

        $return = false;
        if (!empty($queryResult)) {
            $return = true;
        }

        return $return;
    }

    /**
     * query to allow admins to remove a review
     */
    public function removeReview($id)
    {
        $queryBuilder = $this->createQueryBuilder('review');
        $queryBuilder->select('review.id')
            ->where("review.id = :id")
            ->setParameter('id', $id);

        $query = $queryBuilder->getQuery();
        $result = $query->getSingleResult();

        return $result;
    }
}
