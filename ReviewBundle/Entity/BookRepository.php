<?php

namespace Reviewer\ReviewBundle\Entity;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * return the DQL query for all books
     */
    public function getAllBooksQuery()
    {
        $queryBuilder = $this->createQueryBuilder('book');
        $queryBuilder->orderBy('book.timestamp', 'DESC');

        $query = $queryBuilder->getQuery();

        return $query;
    }

    /**
     * query to retrieve the provided search
     */
    public function search($searchStr)
    {
        $quearyBuilder = $this->createQueryBuilder('book');
        $quearyBuilder->where('book.author LIKE :searchStr')
            ->orWhere('book.title LIKE :searchStr')
            ->orderBy('book.title')
            ->setParameter('searchStr', '%'.$searchStr.'%');

        $query = $quearyBuilder->getQuery();

        return $query;
    }

    /**
     * returns all the books that have been stored in the user's shelf
     * optional param changes it to boolean result
     */
    public function getShelf($bookId, $username, $check = false)
    {
        $queryBuilder = $this->createQueryBuilder('book');
        $queryBuilder->select('book.id', 'book.shelf')
            ->where('book.id = :bookId')
            ->setParameter('bookId', $bookId);

        $query = $queryBuilder->getQuery();
        $result = $query->getResult();
        $shelf = true;

        if (empty($result)) {
            $shelf = false;
        } else {
            foreach ($result as $data) {
                if (strpos($data['shelf'], $username) !== false) {
                    if ($check !== true) {
                        $shelf = $data['shelf'];
                    }
                } else {
                    if ($check !== true) {
                        $shelf = $data['shelf'] . ',' . $username;
                    } else {
                        $shelf = false;
                    }
                }
            }
        }

        return $shelf;
    }

    /**
     * query to return all books that the user has in their account
     */
    public function getAllBooksByUser($username)
    {
        $queryBuilder = $this->createQueryBuilder('book');
        $queryBuilder->where('book.shelf LIKE :user')
            ->setParameter('user', '%'.$username.'%');

        $query = $queryBuilder->getQuery();
        $result = $query->getResult();

        return $result;
    }

    /**
     * query to remove books from user's account
     */
    public function removeBookFromShelf($id, $username)
    {
        $queryBuilder = $this->createQueryBuilder('book');
        $queryBuilder->select('book.id','book.shelf')
            ->where('book.shelf LIKE :user')
            ->andWhere('book.id = :id')
            ->setParameter('user', '%'.$username.'%')
            ->setParameter('id', $id);

        $query = $queryBuilder->getQuery();
        $result = $query->getResult();

        $shelf = false;
        foreach ($result as $data) {
            if (strpos($data['shelf'],$username) !== false) {
                $shelf = str_replace([','.$username,$username.',',$username],'',$data['shelf']);
            }
        }

        return $shelf;
    }
    public function checkIfBookExists($bookTitle)
    {
        $queryBuilder = $this->createQueryBuilder('book');
        $queryBuilder->select('book.id','book.title');

        $query = $queryBuilder->getQuery();
        $result = $query->getResult();

        $bookExists = false;
        foreach($result as $data) {
            if ($data['title'] == $bookTitle) {
                $bookExists = $data['id'];
            }
        }

        return $bookExists;
    }
}
